rna <- RunPCA(rna, npcs = 100)
rna <- RunTSNE(rna, dims = 1:30)
rna <- FindNeighbors(rna, dims = 1:30)
rna <- FindClusters(rna, resolution = 0.4, algorithm = 3)
rna <- RunUMAP(rna, graph = 'RNA_nn', metric = 'euclidean')
DimPlot(rna, reduction = "umap")
cluster1.markers <- FindMarkers(rna, ident.1 = 1, min.pct = 0.25)
head(cluster1.markers, n = 5)
rna.markers <- FindAllMarkers(rna, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
library(dplyr)
rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top10 <- rna.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
DoHeatmap(rna, features = top10$gene) + NoLegend()
rna <- RunUMAP(rna, graph = 'RNA_nn', metric = 'euclidean',dims=1:10)
rna <- RunUMAP(rna, graph = 'RNA_nn', metric = 'euclidean')
DimPlot(rna, reduction = "umap")
rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
rna <- RunUMAP(rna, dims=1:10, metric = 'euclidean')
DimPlot(rna, reduction = "umap")
rna <- RunUMAP(rna, graph = 'RNA_nn', metric = 'euclidean')
DimPlot(rna, reduction = "umap")
library(Seurat)
library(dplyr)
# library(reticulate)
# use_python("/Users/cuizhe/anaconda3/bin/python",required = TRUE)
setwd("/Users/cuizhe/project_local/2020-06-21-seurat-rna-seq-10x-5k-v3")
# load 5x v3 pbmc data
counts <- Read10X_h5("./tmp5k_v3.0.2/5k_pbmc_v3_filtered_feature_bc_matrix.h5")
rownames(counts) <- make.unique(rownames(counts))
rna <- CreateSeuratObject(counts = counts, assay = 'RNA', min.cells = 5, min.features = 500, project = '10x_RNA')
rna <- RenameCells(rna, add.cell.id = 'rna')
mito.features <- grep(pattern = "^MT-", x = rownames(x = rna), value = TRUE)
percent.mito <- Matrix::colSums(x = GetAssayData(object = rna, slot = 'counts')[mito.features, ]) / Matrix::colSums(x = GetAssayData(object = rna, slot = 'counts'))
rna$percent.mito <- percent.mito
# QC
rna <- subset(x = rna, subset = nCount_RNA > 2000 & nCount_RNA < 20000 & percent.mito < 0.2)
# preprocessing
rna <- NormalizeData(rna)
rna <- FindVariableFeatures(rna, nfeatures = 3000)
rna <- ScaleData(rna)
rna <- RunPCA(rna, npcs = 100)
rna <- RunTSNE(rna, dims = 1:30)
rna <- FindNeighbors(rna, dims = 1:30)
rna <- FindClusters(rna, resolution = 0.4, algorithm = 3)
rna <- RunUMAP(rna, graph = 'RNA_nn', metric = 'euclidean')
DimPlot(rna, reduction = "umap")
rna.markers <- FindAllMarkers(rna, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
top10 <- rna.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
DoHeatmap(rna, features = top10$gene) + NoLegend()
options(max.print=1000000)
rna.markers <- FindAllMarkers(rna, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
options(max.print=1000000)
rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
View(rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC))
View(rna.markers %>% group_by(cluster) %>% top_n(n = 23, wt = avg_logFC))
View(rna.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC))
View(rna.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC))
View(rna.markers %>% group_by(cluster) %>% top_n(n = 20, wt = avg_logFC))
names(x = new.cluster.ids) <- levels(x = rna)
new.cluster.ids <- c(
"Naive CD4+ T",
'CD14+ Mono',
'Memory CD4+',
'NK',
'B',
'B',
'NK',
'CD8+ T',
'FCGR3A+ Mono',
'DC',
'Platelet'
)
names(x = new.cluster.ids) <- levels(x = rna)
rna <- RenameIdents(object = rna, new.cluster.ids)
DimPlot(rna, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
rna$celltype <- Idents(rna)
nk.cells <- subset(rna, subset = celltype == 'NK cell')
gzmk <- GetAssayData(nk.cells, assay = 'RNA', slot = 'data')['GZMK', ]
nk.cells <- subset(rna, subset = celltype == 'NK')
gzmk <- GetAssayData(nk.cells, assay = 'RNA', slot = 'data')['GZMK', ]
nk.cells$bright <- ifelse(gzmk > 1, 'NK bright', 'NK dim')
ctypes <- as.vector(rna$celltype)
names(ctypes) <- names(rna$celltype)
ctypes[Cells(nk.cells)] <- nk.cells$bright
rna <- AddMetaData(rna, metadata = ctypes, col.name = 'celltype')
DimPlot(rna, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
saveRDS(rna, "./tmp10k_v3.0.2/pbmc_5k_v3.rds")
saveRDS(rna, "./tmp5k_v3.0.2/pbmc_5k_v3.rds")
library(Seurat)
# library(reticulate)
# use_python("/Users/cuizhe/anaconda3/bin/python",required = TRUE)
setwd("/Users/cuizhe/project_local/2020-06-21-seurat-rna-seq-10x-5k-v3")
# load 10x nextgem pbmc data
counts <- Read10X_h5("./tmp5k_nextgem3.0.2/5k_pbmc_v3_nextgem_filtered_feature_bc_matrix.h5")
rownames(counts) <- make.unique(rownames(counts))
rna <- CreateSeuratObject(counts = counts, assay = 'RNA', min.cells = 5, min.features = 500, project = '10x_RNA')
rna <- RenameCells(rna, add.cell.id = 'rna')
mito.features <- grep(pattern = "^MT-", x = rownames(x = rna), value = TRUE)
percent.mito <- Matrix::colSums(x = GetAssayData(object = rna, slot = 'counts')[mito.features, ]) / Matrix::colSums(x = GetAssayData(object = rna, slot = 'counts'))
rna$percent.mito <- percent.mito
# QC
rna <- subset(x = rna, subset = nCount_RNA > 2000 & nCount_RNA < 20000 & percent.mito < 0.2)
# preprocessing
rna <- NormalizeData(rna)
rna <- FindVariableFeatures(rna, nfeatures = 3000)
rna <- ScaleData(rna)
rna <- RunPCA(rna, npcs = 100)
rna <- RunTSNE(rna, dims = 1:30)
rna <- FindNeighbors(rna, dims = 1:30)
rna <- FindClusters(rna, resolution = 0.4, algorithm = 3)
rna <- RunUMAP(rna, graph = 'RNA_nn', metric = 'euclidean')
rna.markers <- FindAllMarkers(rna, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
View(rna.markers %>% group_by(cluster) %>% top_n(n = 20, wt = avg_logFC))
top10 <- rna.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
DoHeatmap(rna, features = top10$gene) + NoLegend()
DimPlot(rna, reduction = "umap")
DoHeatmap(rna, features = top10$gene) + NoLegend()
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"CD8A"))
FeaturePlot(rna, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"CD8A"))
DimPlot(rna, reduction = "umap")
FeaturePlot(rna, features = c("IL7R","CCR7","S100A4","CD14","LYZ","MS4A1","CD8A","FCGR3A","MS4A7", "GNLY","NKG7", "FCER1A", "CST3","PPBP"))
DoHeatmap(rna, features = top10$gene) + NoLegend()
library(Seurat)
library(dplyr)
# library(reticulate)
# use_python("/Users/cuizhe/anaconda3/bin/python",required = TRUE)
setwd("/Users/cuizhe/project_local/2020-06-21-seurat-rna-seq-10x-5k-v3")
# load 5x v3 pbmc data
counts <- Read10X_h5("./tmp5k_v3.0.2/5k_pbmc_v3_filtered_feature_bc_matrix.h5")
rownames(counts) <- make.unique(rownames(counts))
rna <- CreateSeuratObject(counts = counts, assay = 'RNA', min.cells = 5, min.features = 500, project = '10x_RNA')
rna <- RenameCells(rna, add.cell.id = 'rna')
mito.features <- grep(pattern = "^MT-", x = rownames(x = rna), value = TRUE)
percent.mito <- Matrix::colSums(x = GetAssayData(object = rna, slot = 'counts')[mito.features, ]) / Matrix::colSums(x = GetAssayData(object = rna, slot = 'counts'))
rna$percent.mito <- percent.mito
# QC
rna <- subset(x = rna, subset = nCount_RNA > 2000 & nCount_RNA < 20000 & percent.mito < 0.2)
# preprocessing
rna <- NormalizeData(rna)
rna <- FindVariableFeatures(rna, nfeatures = 3000)
rna <- ScaleData(rna)
rna <- RunPCA(rna, npcs = 100)
rna <- RunTSNE(rna, dims = 1:30)
rna <- FindNeighbors(rna, dims = 1:30)
rna <- FindClusters(rna, resolution = 0.4, algorithm = 3)
rna <- RunUMAP(rna, graph = 'RNA_nn', metric = 'euclidean')
DimPlot(rna, reduction = "umap")
rna.markers <- FindAllMarkers(rna, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
View(rna.markers %>% group_by(cluster) %>% top_n(n = 20, wt = avg_logFC))
top10 <- rna.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
DoHeatmap(rna, features = top10$gene) + NoLegend()
new.cluster.ids <- c(
"Naive CD4+ T",
'CD14+ Mono',
'Memory CD4+',
'NK',
'NK',
'B',
'B',
'CD8+ T',
'FCGR3A+ Mono',
'NK',
'DC',
'Platelet',
)
names(x = new.cluster.ids) <- levels(x = rna)
rna <- RenameIdents(object = rna, new.cluster.ids)
source('~/project_local/2020-06-21-seurat-rna-seq-10x-5k-v3/bin/run_seurat_nextgem.r', echo=TRUE)
new.cluster.ids <- c(
"Naive CD4+ T",
'CD14+ Mono',
'Memory CD4+',
'NK',
'NK',
'B',
'B',
'CD8+ T',
'FCGR3A+ Mono',
'NK',
'DC',
'Platelet')
names(x = new.cluster.ids) <- levels(x = rna)
rna <- RenameIdents(object = rna, new.cluster.ids)
rna$celltype <- Idents(rna)
nk.cells <- subset(rna, subset = celltype == 'NK')
gzmk <- GetAssayData(nk.cells, assay = 'RNA', slot = 'data')['GZMK', ]
nk.cells$bright <- ifelse(gzmk > 1, 'NK bright', 'NK dim')
ctypes <- as.vector(rna$celltype)
names(ctypes) <- names(rna$celltype)
ctypes[Cells(nk.cells)] <- nk.cells$bright
rna <- AddMetaData(rna, metadata = ctypes, col.name = 'celltype')
saveRDS(rna, "./tmp5k_nextgem3.0.2/pbmc_5k_nextgem.rds")
library(Seurat)
set.seed(1234)
setwd("/Users/cuizhe/project_local/2020-06-27-seurat-atac-seq-10x-5k-v1")
# load atac peak counts and create gene activity matrix
peaks <- Read10X_h5("./input/atac_pbmc_5k_v1_filtered_peak_bc_matrix.h5.")
activity.matrix <- CreateGeneActivityMatrix(
peak.matrix = peaks,
annotation.file = "./input/Homo_sapiens.GRCh37.82.gtf"
)
# load atac peak counts and create gene activity matrix
peaks <- Read10X_h5("./input/atac_pbmc_5k_v1_filtered_peak_bc_matrix.h5")
activity.matrix <- CreateGeneActivityMatrix(
peak.matrix = peaks,
annotation.file = "./input/Homo_sapiens.GRCh37.82.gtf"
)
activity.matrix <- CreateGeneActivityMatrix(
peak.matrix = peaks,
annotation.file = "./input/Homo_sapiens.GRCh37.82.gtf.gz"
)
# create object and filter cells
pbmc.atac <- CreateSeuratObject(counts = peaks, assay = 'ATAC', project = '10x_ATAC')
pbmc.atac[['RNA']] <- CreateAssayObject(counts = activity.matrix)
meta <- read.table("./input/atac_pbmc_5k_v1_singlecell.csv", sep = ",", header = TRUE, row.names = 1, stringsAsFactors = FALSE)
meta <- meta[colnames(pbmc.atac), ]
pbmc.atac <- AddMetaData(pbmc.atac, metadata = meta)
pbmc.atac <- subset(pbmc.atac, subset = nCount_ATAC > 5000)
# process activity score matrix
DefaultAssay(pbmc.atac) <- 'RNA'
pbmc.atac <- FindVariableFeatures(pbmc.atac, nfeatures = 5000)
pbmc.atac <- NormalizeData(pbmc.atac)
pbmc.atac <- ScaleData(pbmc.atac)
pbmc.atac <- RunPCA(pbmc.atac, npcs = 50)
pbmc.atac <- FindNeighbors(pbmc.atac, reduction = 'pca', dims = 1:30)
pbmc.atac <- RunUMAP(pbmc.atac, graph = 'RNA_nn')
# process peaks
DefaultAssay(pbmc.atac) <- "ATAC"
VariableFeatures(pbmc.atac) <- names(which(Matrix::rowSums(pbmc.atac) > 100))
pbmc.atac <- RunLSI(pbmc.atac, n = 100)
pbmc.atac <- FindNeighbors(pbmc.atac, dims = 1:30, reduction = 'lsi')
pbmc.atac <- FindClusters(pbmc.atac, graph = 'ATAC_nn', resoluton = 1)
pbmc.atac <- RunTSNE(pbmc.atac, reduction = 'lsi', dims = 1:30, reduction.name = 'tsne.lsi', reduction.key = 'LSItSNE_')
pbmc.atac <- RunUMAP(pbmc.atac, graph = 'ATAC_nn', reduction.name = 'umap.lsi', reduction.key = 'LSIUMAP_')
library(Seurat)
library(ggplot2)
set.seed(1234)
setwd("/Users/cuizhe/project_local/2020-06-27-seurat-atac-seq-10x-5k-v1")
# load atac peak counts and create gene activity matrix
peaks <- Read10X_h5("./input/atac_pbmc_5k_v1_filtered_peak_bc_matrix.h5")
activity.matrix <- CreateGeneActivityMatrix(
peak.matrix = peaks,
annotation.file = "./input/Homo_sapiens.GRCh37.82.gtf.gz"
)
k
# create object and filter cells
pbmc.atac <- CreateSeuratObject(counts = peaks, assay = 'ATAC', project = '10x_ATAC')
pbmc.atac[['ACTIVITY']] <- CreateAssayObject(counts = activity.matrix)
meta <- read.table("./input/atac_pbmc_5k_v1_singlecell.csv", sep = ",", header = TRUE, row.names = 1, stringsAsFactors = FALSE)
meta <- meta[colnames(pbmc.atac), ]
pbmc.atac <- AddMetaData(pbmc.atac, metadata = meta)
pbmc.atac <- subset(pbmc.atac, subset = nCount_ATAC > 5000)
pbmc.atac$tech <- "atac"
# process activity score matrix
DefaultAssay(pbmc.atac) <- 'ACTIVITY'
pbmc.atac <- FindVariableFeatures(pbmc.atac, nfeatures = 5000)
pbmc.atac <- NormalizeData(pbmc.atac)
pbmc.atac <- ScaleData(pbmc.atac)
# process peaks
DefaultAssay(pbmc.atac) <- "ATAC"
VariableFeatures(pbmc.atac) <- names(which(Matrix::rowSums(pbmc.atac) > 100))
pbmc.atac <- RunLSI(pbmc.atac, n = 50, scale.max = NULL)
pbmc.atac <- FindNeighbors(pbmc.atac, dims = 1:30, reduction = 'lsi')
pbmc.atac <- FindClusters(pbmc.atac, graph = 'ATAC_nn', resoluton = 1)
pbmc.atac <- RunTSNE(pbmc.atac, reduction = 'lsi', dims = 1:30, reduction.name = 'tsne.lsi', reduction.key = 'LSItSNE_')
pbmc.atac <- RunUMAP(pbmc.atac, graph = 'ATAC_nn', reduction.name = 'umap.lsi', reduction.key = 'LSIUMAP_')
saveRDS(pbmc.atac, "./output/pbmc_5k_atac_v1.rds")
pbmc.rna <- readRDS("../input/pbmc_5k_v3.rds")
pbmc.rna$tech <- "rna"
p1 <- DimPlot(pbmc.atac, reduction = "umap") + NoLegend() + ggtitle("scATAC-seq")
p2 <- DimPlot(pbmc.rna, group.by = "celltype", label = TRUE, repel = TRUE) + NoLegend() + ggtitle("scRNA-seq")
p1 + p2
pbmc.rna <- readRDS("../input/pbmc_5k_v3.rds")
pbmc.rna <- readRDS("./input/pbmc_5k_v3.rds")
pbmc.rna$tech <- "rna"
p1 <- DimPlot(pbmc.atac, reduction = "umap") + NoLegend() + ggtitle("scATAC-seq")
# pbmc.atac <- FindNeighbors(pbmc.atac, dims = 1:30, reduction = 'lsi')
# pbmc.atac <- FindClusters(pbmc.atac, graph = 'ATAC_nn', resoluton = 1)
# pbmc.atac <- RunTSNE(pbmc.atac, reduction = 'lsi', dims = 1:30, reduction.name = 'tsne.lsi', reduction.key = 'LSItSNE_')
# pbmc.atac <- RunUMAP(pbmc.atac, graph = 'ATAC_nn', reduction.name = 'umap.lsi', reduction.key = 'LSIUMAP_')
pbmc.atac <- RunUMAP(pbmc.atac, reduction = "lsi", dims = 1:50)
saveRDS(pbmc.atac, "./output/pbmc_5k_atac_v1.rds")
pbmc.rna <- readRDS("./input/pbmc_5k_v3.rds")
pbmc.rna$tech <- "rna"
p1 <- DimPlot(pbmc.atac, reduction = "umap") + NoLegend() + ggtitle("scATAC-seq")
p2 <- DimPlot(pbmc.rna, group.by = "celltype", label = TRUE, repel = TRUE) + NoLegend() + ggtitle("scRNA-seq")
p1 + p2
transfer.anchors <- FindTransferAnchors(reference = pbmc.rna, query = pbmc.atac, features = VariableFeatures(object = pbmc.rna),
reference.assay = "RNA", query.assay = "ACTIVITY", reduction = "cca")
celltype.predictions <- TransferData(anchorset = transfer.anchors, refdata = pbmc.rna$celltype,
weight.reduction = pbmc.atac[["lsi"]])
pbmc.atac <- AddMetaData(pbmc.atac, metadata = celltype.predictions)
hist(pbmc.atac$prediction.score.max)
abline(v = 0.5, col = "red")
table(pbmc.atac$prediction.score.max > 0.5)
pbmc.atac.filtered <- subset(pbmc.atac, subset = prediction.score.max > 0.5)
pbmc.atac.filtered$predicted.id <- factor(pbmc.atac.filtered$predicted.id, levels = levels(pbmc.rna))  # to make the colors match
p1 <- DimPlot(pbmc.atac.filtered, group.by = "predicted.id", label = TRUE, repel = TRUE) + ggtitle("scATAC-seq cells") +
NoLegend() + scale_colour_hue(drop = FALSE)
p2 <- DimPlot(pbmc.rna, group.by = "celltype", label = TRUE, repel = TRUE) + ggtitle("scRNA-seq cells") +
NoLegend()
p1 + p2
# note that we restrict the imputation to variable genes from scRNA-seq, but could impute the
# full transcriptome if we wanted to
genes.use <- VariableFeatures(pbmc.rna)
refdata <- GetAssayData(pbmc.rna, assay = "RNA", slot = "data")[genes.use, ]
# refdata (input) contains a scRNA-seq expression matrix for the scRNA-seq cells.  imputation
# (output) will contain an imputed scRNA-seq matrix for each of the ATAC cells
imputation <- TransferData(anchorset = transfer.anchors, refdata = refdata, weight.reduction = pbmc.atac[["lsi"]])
# this line adds the imputed data matrix to the pbmc.atac object
pbmc.atac[["RNA"]] <- imputation
coembed <- merge(x = pbmc.rna, y = pbmc.atac)
# Finally, we run PCA and UMAP on this combined object, to visualize the co-embedding of both
# datasets
coembed <- ScaleData(coembed, features = genes.use, do.scale = FALSE)
coembed <- RunPCA(coembed, features = genes.use, verbose = FALSE)
coembed <- RunUMAP(coembed, dims = 1:30)
coembed$celltype <- ifelse(!is.na(coembed$celltype), coembed$celltype, coembed$predicted.id)
p1 <- DimPlot(coembed, group.by = "tech")
p2 <- DimPlot(coembed, group.by = "celltype", label = TRUE, repel = TRUE)
p1 + p2
pbmc.atac.filtered$predicted.id
length(pbmc.atac.filtered$predicted.id)
length(na.omit(pbmc.atac.filtered$predicted.id))
saveRDS(pbmc.atac.filtered, "./output/pbmc_5k_atac_v1.rds")
library(Seurat)
library(ggplot2)
set.seed(1234)
setwd("/Users/cuizhe/project_local/2020-06-28-seurat-atac-seq-10x-5k-nextgem")
# load atac peak counts and create gene activity matrix
peaks <- Read10X_h5("./input/atac_pbmc_5k_nextgem_filtered_peak_bc_matrix.h5")
activity.matrix <- CreateGeneActivityMatrix(
peak.matrix = peaks,
annotation.file = "./input/Homo_sapiens.GRCh37.82.gtf.gz"
)
# create object and filter cells
pbmc.atac <- CreateSeuratObject(counts = peaks, assay = 'ATAC', project = '10x_ATAC')
pbmc.atac[['ACTIVITY']] <- CreateAssayObject(counts = activity.matrix)
meta <- read.table("./input/atac_pbmc_5k_nextgem_singlecell.csv", sep = ",", header = TRUE, row.names = 1, stringsAsFactors = FALSE)
meta <- meta[colnames(pbmc.atac), ]
pbmc.atac <- AddMetaData(pbmc.atac, metadata = meta)
pbmc.atac <- subset(pbmc.atac, subset = nCount_ATAC > 5000)
pbmc.atac$tech <- "atac"
# process activity score matrix
DefaultAssay(pbmc.atac) <- 'ACTIVITY'
pbmc.atac <- FindVariableFeatures(pbmc.atac, nfeatures = 5000)
pbmc.atac <- NormalizeData(pbmc.atac)
pbmc.atac <- ScaleData(pbmc.atac)
# pbmc.atac <- RunPCA(pbmc.atac, npcs = 50)
# pbmc.atac <- FindNeighbors(pbmc.atac, reduction = 'pca', dims = 1:30)
# pbmc.atac <- RunUMAP(pbmc.atac, graph = 'RNA_nn')
# process peaks
DefaultAssay(pbmc.atac) <- "ATAC"
VariableFeatures(pbmc.atac) <- names(which(Matrix::rowSums(pbmc.atac) > 100))
pbmc.atac <- RunLSI(pbmc.atac, n = 50, scale.max = NULL)
# pbmc.atac <- FindNeighbors(pbmc.atac, dims = 1:30, reduction = 'lsi')
# pbmc.atac <- FindClusters(pbmc.atac, graph = 'ATAC_nn', resoluton = 1)
# pbmc.atac <- RunTSNE(pbmc.atac, reduction = 'lsi', dims = 1:30, reduction.name = 'tsne.lsi', reduction.key = 'LSItSNE_')
# pbmc.atac <- RunUMAP(pbmc.atac, graph = 'ATAC_nn', reduction.name = 'umap.lsi', reduction.key = 'LSIUMAP_')
pbmc.atac <- RunUMAP(pbmc.atac, reduction = "lsi", dims = 1:50)
pbmc.rna <- readRDS("./input/pbmc_5k_v3.rds")
pbmc.rna$tech <- "rna"
p1 <- DimPlot(pbmc.atac, reduction = "umap") + NoLegend() + ggtitle("scATAC-seq")
p2 <- DimPlot(pbmc.rna, group.by = "celltype", label = TRUE, repel = TRUE) + NoLegend() + ggtitle("scRNA-seq")
p1 + p2
transfer.anchors <- FindTransferAnchors(reference = pbmc.rna, query = pbmc.atac, features = VariableFeatures(object = pbmc.rna),
reference.assay = "RNA", query.assay = "ACTIVITY", reduction = "cca")
celltype.predictions <- TransferData(anchorset = transfer.anchors, refdata = pbmc.rna$celltype,
weight.reduction = pbmc.atac[["lsi"]])
pbmc.atac <- AddMetaData(pbmc.atac, metadata = celltype.predictions)
hist(pbmc.atac$prediction.score.max)
abline(v = 0.5, col = "red")
table(pbmc.atac$prediction.score.max > 0.5)
pbmc.atac.filtered <- subset(pbmc.atac, subset = prediction.score.max > 0.5)
pbmc.atac.filtered$predicted.id <- factor(pbmc.atac.filtered$predicted.id, levels = levels(pbmc.rna))  # to make the colors match
p1 <- DimPlot(pbmc.atac.filtered, group.by = "predicted.id", label = TRUE, repel = TRUE) + ggtitle("scATAC-seq cells") +
NoLegend() + scale_colour_hue(drop = FALSE)
p2 <- DimPlot(pbmc.rna, group.by = "celltype", label = TRUE, repel = TRUE) + ggtitle("scRNA-seq cells") +
NoLegend()
p1 + p2
library(pheatmap)
library(pheatmap)
#for corces 2016 data
cur_dir = "/Volumes/LACIE_SHARE/project/2020-06-03-svmPipeline_corces2016_enh_int/output"
for(enh in c("0.1","0.2","0.3","No")){
for(int in c("0.25","0.5","0.75","No",)){
if(enh =="No" && int != "No"){
next
}
setwd(paste0(cur_dir,"/enh",enh,"_int",int))
data<-read.table("./Confusion/SVM.csv",sep = ",",header = TRUE)
}
}
for(enh in c("0.1","0.2","0.3","No")){
for(int in c("0.25","0.5","0.75","No")){
if(enh =="No" && int != "No"){
next
}
setwd(paste0(cur_dir,"/enh",enh,"_int",int))
data<-read.table("./Confusion/SVM.csv",sep = ",",header = TRUE)
}
}
data
source('~/Documents/svm-scATAC-paper/code/Untitled.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/Untitled.R', echo=TRUE)
?pheatmap
View(data)
View(data)
calss(data)
type(data)
class(data)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
View(data)
class(data)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
View(data)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
View(data)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
View(data)
View(popSize)
View(data)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
View(popSize)
View(data)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
dev.new()
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
dev.new()
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
library(pheatmap)
#for corces 2016 data
cur_dir = "/Volumes/LACIE_SHARE/project/2020-06-03-svmPipeline_corces2016_enh_int/output"
par(mfrow=c(1,2))
enh="0.1"
int="0.25"
setwd(paste0(cur_dir,"/enh",enh,"_int",int))
data<-read.table("./Confusion/SVM.csv",sep = ",",header = TRUE,row.names = 1)
data<-as.matrix(data)
popSize<-read.table("./PopSize/SVM.csv",sep=",",header = TRUE,row.names = 1)
data<-data/popSize[,1]
pheatmap(data,cluster_rows = F,cluster_cols = F,color = colorRampPalette(colors = c("snow","LightSlateBlue","DarkSlateBlue"))(100),cellwidth = 16, cellheight = 15, fontsize=7, fontsize_row=6)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
dev.new()
dev.new(1)
#for corces 2016 data
cur_dir = "/Volumes/LACIE_SHARE/project/2020-06-03-svmPipeline_corces2016_enh_int/output"
enh="0.1"
int="0.25"
setwd(paste0(cur_dir,"/enh",enh,"_int",int))
data<-read.table("./Confusion/SVM.csv",sep = ",",header = TRUE,row.names = 1)
data<-as.matrix(data)
popSize<-read.table("./PopSize/SVM.csv",sep=",",header = TRUE,row.names = 1)
data<-data/popSize[,1]
pheatmap(data,cluster_rows = F,cluster_cols = F,color = colorRampPalette(colors = c("snow","LightSlateBlue","DarkSlateBlue"))(100),cellwidth = 16, cellheight = 15, fontsize=7, fontsize_row=6)
enh="No"
int="No"
setwd(paste0(cur_dir,"/enh",enh,"_int",int))
data<-read.table("./Confusion/SVM.csv",sep = ",",header = TRUE,row.names = 1)
data<-as.matrix(data)
popSize<-read.table("./PopSize/SVM.csv",sep=",",header = TRUE,row.names = 1)
data<-data/popSize[,1]
pheatmap(data,cluster_rows = F,cluster_cols = F,color = colorRampPalette(colors = c("snow","LightSlateBlue","DarkSlateBlue"))(100),cellwidth = 16, cellheight = 15, fontsize=7, fontsize_row=6)
#for corces 2016 data
cur_dir = "/Volumes/LACIE_SHARE/project/2020-06-03-svmPipeline_corces2016_enh_int/output"
par(mfrow=c(1,2))
enh="0.1"
int="0.25"
setwd(paste0(cur_dir,"/enh",enh,"_int",int))
data<-read.table("./Confusion/SVM.csv",sep = ",",header = TRUE,row.names = 1)
data<-as.matrix(data)
popSize<-read.table("./PopSize/SVM.csv",sep=",",header = TRUE,row.names = 1)
data<-data/popSize[,1]
pheatmap(data,cluster_rows = F,cluster_cols = F,color = colorRampPalette(colors = c("snow","LightSlateBlue","DarkSlateBlue"))(100),cellwidth = 16, cellheight = 15, fontsize=7, fontsize_row=6)
enh="No"
int="No"
setwd(paste0(cur_dir,"/enh",enh,"_int",int))
data<-read.table("./Confusion/SVM.csv",sep = ",",header = TRUE,row.names = 1)
data<-as.matrix(data)
popSize<-read.table("./PopSize/SVM.csv",sep=",",header = TRUE,row.names = 1)
data<-data/popSize[,1]
pheatmap(data,cluster_rows = F,cluster_cols = F,color = colorRampPalette(colors = c("snow","LightSlateBlue","DarkSlateBlue"))(100),cellwidth = 16, cellheight = 15, fontsize=7, fontsize_row=6)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
source('~/Documents/svm-scATAC-paper/code/heatmap_confusion.R', echo=TRUE)
